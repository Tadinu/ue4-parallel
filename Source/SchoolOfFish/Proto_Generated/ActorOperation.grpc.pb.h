// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ActorOperation.proto
#ifndef GRPC_ActorOperation_2eproto__INCLUDED
#define GRPC_ActorOperation_2eproto__INCLUDED

#include "ActorOperation.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rpc {

class ActorOperation final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.ActorOperation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sets the transform of the actor
    virtual ::grpc::Status SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::rpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>> AsyncSetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>>(AsyncSetActorTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>> PrepareAsyncSetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>>(PrepareAsyncSetActorTransformRaw(context, request, cq));
    }
    // Retrieves the current transform of the actor
    virtual ::grpc::Status GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::rpc::ActorInstanceTransform* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ActorInstanceTransform>> AsyncGetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ActorInstanceTransform>>(AsyncGetActorTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ActorInstanceTransform>> PrepareAsyncGetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ActorInstanceTransform>>(PrepareAsyncGetActorTransformRaw(context, request, cq));
    }
    // Inform Server about actor environment Info
    virtual ::grpc::Status InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::rpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>> AsyncInformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>>(AsyncInformEnvironmentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>> PrepareAsyncInformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>>(PrepareAsyncInformEnvironmentInfoRaw(context, request, cq));
    }
    // Applies force to the actor
    virtual ::grpc::Status ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::rpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>> AsyncApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>>(AsyncApplyForceToActorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>> PrepareAsyncApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>>(PrepareAsyncApplyForceToActorRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sets the transform of the actor
      virtual void SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Retrieves the current transform of the actor
      virtual void GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Inform Server about actor environment Info
      virtual void InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Applies force to the actor
      virtual void ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>* AsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>* PrepareAsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ActorInstanceTransform>* AsyncGetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ActorInstanceTransform>* PrepareAsyncGetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>* AsyncInformEnvironmentInfoRaw(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>* PrepareAsyncInformEnvironmentInfoRaw(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>* AsyncApplyForceToActorRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Empty>* PrepareAsyncApplyForceToActorRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::rpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>> AsyncSetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>>(AsyncSetActorTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>> PrepareAsyncSetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>>(PrepareAsyncSetActorTransformRaw(context, request, cq));
    }
    ::grpc::Status GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::rpc::ActorInstanceTransform* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>> AsyncGetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>>(AsyncGetActorTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>> PrepareAsyncGetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>>(PrepareAsyncGetActorTransformRaw(context, request, cq));
    }
    ::grpc::Status InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::rpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>> AsyncInformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>>(AsyncInformEnvironmentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>> PrepareAsyncInformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>>(PrepareAsyncInformEnvironmentInfoRaw(context, request, cq));
    }
    ::grpc::Status ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::rpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>> AsyncApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>>(AsyncApplyForceToActorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>> PrepareAsyncApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Empty>>(PrepareAsyncApplyForceToActorRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, std::function<void(::grpc::Status)>) override;
      void GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      void InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      void ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::Empty>* AsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Empty>* PrepareAsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>* AsyncGetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>* PrepareAsyncGetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Empty>* AsyncInformEnvironmentInfoRaw(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Empty>* PrepareAsyncInformEnvironmentInfoRaw(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Empty>* AsyncApplyForceToActorRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Empty>* PrepareAsyncApplyForceToActorRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetActorTransform_;
    const ::grpc::internal::RpcMethod rpcmethod_GetActorTransform_;
    const ::grpc::internal::RpcMethod rpcmethod_InformEnvironmentInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ApplyForceToActor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sets the transform of the actor
    virtual ::grpc::Status SetActorTransform(::grpc::ServerContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response);
    // Retrieves the current transform of the actor
    virtual ::grpc::Status GetActorTransform(::grpc::ServerContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response);
    // Inform Server about actor environment Info
    virtual ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response);
    // Applies force to the actor
    virtual ::grpc::Status ApplyForceToActor(::grpc::ServerContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetActorTransform() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActorTransform(::grpc::ServerContext* context, ::rpc::ActorInstanceTransform* request, ::grpc::ServerAsyncResponseWriter< ::rpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetActorTransform() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActorTransform(::grpc::ServerContext* context, ::rpc::ActorInstanceInfo* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ActorInstanceTransform>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InformEnvironmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InformEnvironmentInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InformEnvironmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInformEnvironmentInfo(::grpc::ServerContext* context, ::rpc::ActorEnvironmentInfo* request, ::grpc::ServerAsyncResponseWriter< ::rpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplyForceToActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplyForceToActor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ApplyForceToActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyForceToActor(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyForceToActor(::grpc::ServerContext* context, ::rpc::ActorInstanceForce* request, ::grpc::ServerAsyncResponseWriter< ::rpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetActorTransform<WithAsyncMethod_GetActorTransform<WithAsyncMethod_InformEnvironmentInfo<WithAsyncMethod_ApplyForceToActor<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetActorTransform() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorInstanceTransform, ::rpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response) { return this->SetActorTransform(context, request, response); }));}
    void SetMessageAllocatorFor_SetActorTransform(
        ::grpc::experimental::MessageAllocator< ::rpc::ActorInstanceTransform, ::rpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorInstanceTransform, ::rpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActorTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActorTransform(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetActorTransform() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorInstanceInfo, ::rpc::ActorInstanceTransform>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response) { return this->GetActorTransform(context, request, response); }));}
    void SetMessageAllocatorFor_GetActorTransform(
        ::grpc::experimental::MessageAllocator< ::rpc::ActorInstanceInfo, ::rpc::ActorInstanceTransform>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorInstanceInfo, ::rpc::ActorInstanceTransform>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActorTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActorTransform(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InformEnvironmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InformEnvironmentInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorEnvironmentInfo, ::rpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response) { return this->InformEnvironmentInfo(context, request, response); }));}
    void SetMessageAllocatorFor_InformEnvironmentInfo(
        ::grpc::experimental::MessageAllocator< ::rpc::ActorEnvironmentInfo, ::rpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorEnvironmentInfo, ::rpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InformEnvironmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InformEnvironmentInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InformEnvironmentInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ApplyForceToActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ApplyForceToActor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorInstanceForce, ::rpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response) { return this->ApplyForceToActor(context, request, response); }));}
    void SetMessageAllocatorFor_ApplyForceToActor(
        ::grpc::experimental::MessageAllocator< ::rpc::ActorInstanceForce, ::rpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rpc::ActorInstanceForce, ::rpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ApplyForceToActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyForceToActor(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ApplyForceToActor(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ApplyForceToActor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SetActorTransform<ExperimentalWithCallbackMethod_GetActorTransform<ExperimentalWithCallbackMethod_InformEnvironmentInfo<ExperimentalWithCallbackMethod_ApplyForceToActor<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SetActorTransform<ExperimentalWithCallbackMethod_GetActorTransform<ExperimentalWithCallbackMethod_InformEnvironmentInfo<ExperimentalWithCallbackMethod_ApplyForceToActor<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetActorTransform() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetActorTransform() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InformEnvironmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InformEnvironmentInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InformEnvironmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplyForceToActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplyForceToActor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ApplyForceToActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyForceToActor(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetActorTransform() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActorTransform(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetActorTransform() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActorTransform(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InformEnvironmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InformEnvironmentInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InformEnvironmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInformEnvironmentInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplyForceToActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplyForceToActor() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ApplyForceToActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyForceToActor(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyForceToActor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetActorTransform() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetActorTransform(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActorTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActorTransform(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetActorTransform() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetActorTransform(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActorTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActorTransform(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InformEnvironmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InformEnvironmentInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InformEnvironmentInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InformEnvironmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InformEnvironmentInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InformEnvironmentInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ApplyForceToActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ApplyForceToActor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplyForceToActor(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ApplyForceToActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyForceToActor(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ApplyForceToActor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ApplyForceToActor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetActorTransform() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::ActorInstanceTransform, ::rpc::Empty>(std::bind(&WithStreamedUnaryMethod_SetActorTransform<BaseClass>::StreamedSetActorTransform, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceTransform* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetActorTransform(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::ActorInstanceTransform,::rpc::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetActorTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetActorTransform() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::ActorInstanceInfo, ::rpc::ActorInstanceTransform>(std::bind(&WithStreamedUnaryMethod_GetActorTransform<BaseClass>::StreamedGetActorTransform, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetActorTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetActorTransform(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceInfo* /*request*/, ::rpc::ActorInstanceTransform* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetActorTransform(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::ActorInstanceInfo,::rpc::ActorInstanceTransform>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InformEnvironmentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InformEnvironmentInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::ActorEnvironmentInfo, ::rpc::Empty>(std::bind(&WithStreamedUnaryMethod_InformEnvironmentInfo<BaseClass>::StreamedInformEnvironmentInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InformEnvironmentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InformEnvironmentInfo(::grpc::ServerContext* /*context*/, const ::rpc::ActorEnvironmentInfo* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInformEnvironmentInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::ActorEnvironmentInfo,::rpc::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplyForceToActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplyForceToActor() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::ActorInstanceForce, ::rpc::Empty>(std::bind(&WithStreamedUnaryMethod_ApplyForceToActor<BaseClass>::StreamedApplyForceToActor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ApplyForceToActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplyForceToActor(::grpc::ServerContext* /*context*/, const ::rpc::ActorInstanceForce* /*request*/, ::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplyForceToActor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::ActorInstanceForce,::rpc::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetActorTransform<WithStreamedUnaryMethod_GetActorTransform<WithStreamedUnaryMethod_InformEnvironmentInfo<WithStreamedUnaryMethod_ApplyForceToActor<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetActorTransform<WithStreamedUnaryMethod_GetActorTransform<WithStreamedUnaryMethod_InformEnvironmentInfo<WithStreamedUnaryMethod_ApplyForceToActor<Service > > > > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_ActorOperation_2eproto__INCLUDED
