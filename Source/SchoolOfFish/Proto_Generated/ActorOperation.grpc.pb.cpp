// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ActorOperation.proto

#include "ActorOperation.pb.h"
#include "ActorOperation.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpc {

static const char* ActorOperation_method_names[] = {
  "/rpc.ActorOperation/SetActorTransform",
  "/rpc.ActorOperation/GetActorTransform",
  "/rpc.ActorOperation/InformEnvironmentInfo",
  "/rpc.ActorOperation/ApplyForceToActor",
};

std::unique_ptr< ActorOperation::Stub> ActorOperation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ActorOperation::Stub> stub(new ActorOperation::Stub(channel));
  return stub;
}

ActorOperation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetActorTransform_(ActorOperation_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActorTransform_(ActorOperation_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InformEnvironmentInfo_(ActorOperation_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplyForceToActor_(ActorOperation_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ActorOperation::Stub::SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::rpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetActorTransform_, context, request, response);
}

void ActorOperation::Stub::experimental_async::SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetActorTransform_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetActorTransform_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::SetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetActorTransform_, context, request, response, reactor);
}

void ActorOperation::Stub::experimental_async::SetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetActorTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::Empty>* ActorOperation::Stub::AsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_SetActorTransform_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::Empty>* ActorOperation::Stub::PrepareAsyncSetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceTransform& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_SetActorTransform_, context, request, false);
}

::grpc::Status ActorOperation::Stub::GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::rpc::ActorInstanceTransform* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetActorTransform_, context, request, response);
}

void ActorOperation::Stub::experimental_async::GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActorTransform_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActorTransform_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::GetActorTransform(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActorTransform_, context, request, response, reactor);
}

void ActorOperation::Stub::experimental_async::GetActorTransform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::ActorInstanceTransform* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActorTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>* ActorOperation::Stub::AsyncGetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::ActorInstanceTransform>::Create(channel_.get(), cq, rpcmethod_GetActorTransform_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::ActorInstanceTransform>* ActorOperation::Stub::PrepareAsyncGetActorTransformRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::ActorInstanceTransform>::Create(channel_.get(), cq, rpcmethod_GetActorTransform_, context, request, false);
}

::grpc::Status ActorOperation::Stub::InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::rpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InformEnvironmentInfo_, context, request, response);
}

void ActorOperation::Stub::experimental_async::InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InformEnvironmentInfo_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InformEnvironmentInfo_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::InformEnvironmentInfo(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InformEnvironmentInfo_, context, request, response, reactor);
}

void ActorOperation::Stub::experimental_async::InformEnvironmentInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InformEnvironmentInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::Empty>* ActorOperation::Stub::AsyncInformEnvironmentInfoRaw(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_InformEnvironmentInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::Empty>* ActorOperation::Stub::PrepareAsyncInformEnvironmentInfoRaw(::grpc::ClientContext* context, const ::rpc::ActorEnvironmentInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_InformEnvironmentInfo_, context, request, false);
}

::grpc::Status ActorOperation::Stub::ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::rpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ApplyForceToActor_, context, request, response);
}

void ActorOperation::Stub::experimental_async::ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ApplyForceToActor_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ApplyForceToActor_, context, request, response, std::move(f));
}

void ActorOperation::Stub::experimental_async::ApplyForceToActor(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ApplyForceToActor_, context, request, response, reactor);
}

void ActorOperation::Stub::experimental_async::ApplyForceToActor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ApplyForceToActor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::Empty>* ActorOperation::Stub::AsyncApplyForceToActorRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_ApplyForceToActor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpc::Empty>* ActorOperation::Stub::PrepareAsyncApplyForceToActorRaw(::grpc::ClientContext* context, const ::rpc::ActorInstanceForce& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_ApplyForceToActor_, context, request, false);
}

ActorOperation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorOperation_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorOperation::Service, ::rpc::ActorInstanceTransform, ::rpc::Empty>(
          std::mem_fn(&ActorOperation::Service::SetActorTransform), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorOperation_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorOperation::Service, ::rpc::ActorInstanceInfo, ::rpc::ActorInstanceTransform>(
          std::mem_fn(&ActorOperation::Service::GetActorTransform), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorOperation_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorOperation::Service, ::rpc::ActorEnvironmentInfo, ::rpc::Empty>(
          std::mem_fn(&ActorOperation::Service::InformEnvironmentInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActorOperation_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActorOperation::Service, ::rpc::ActorInstanceForce, ::rpc::Empty>(
          std::mem_fn(&ActorOperation::Service::ApplyForceToActor), this)));
}

ActorOperation::Service::~Service() {
}

::grpc::Status ActorOperation::Service::SetActorTransform(::grpc::ServerContext* context, const ::rpc::ActorInstanceTransform* request, ::rpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorOperation::Service::GetActorTransform(::grpc::ServerContext* context, const ::rpc::ActorInstanceInfo* request, ::rpc::ActorInstanceTransform* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorOperation::Service::InformEnvironmentInfo(::grpc::ServerContext* context, const ::rpc::ActorEnvironmentInfo* request, ::rpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActorOperation::Service::ApplyForceToActor(::grpc::ServerContext* context, const ::rpc::ActorInstanceForce* request, ::rpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

