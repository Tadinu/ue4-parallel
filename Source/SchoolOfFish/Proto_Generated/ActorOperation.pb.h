// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActorOperation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActorOperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActorOperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActorOperation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActorOperation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActorOperation_2eproto;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class InstanceForce;
class InstanceForceDefaultTypeInternal;
extern InstanceForceDefaultTypeInternal _InstanceForce_default_instance_;
class InstanceIndex;
class InstanceIndexDefaultTypeInternal;
extern InstanceIndexDefaultTypeInternal _InstanceIndex_default_instance_;
class InstanceTransform;
class InstanceTransformDefaultTypeInternal;
extern InstanceTransformDefaultTypeInternal _InstanceTransform_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector3D;
class Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::InstanceForce* Arena::CreateMaybeMessage<::InstanceForce>(Arena*);
template<> ::InstanceIndex* Arena::CreateMaybeMessage<::InstanceIndex>(Arena*);
template<> ::InstanceTransform* Arena::CreateMaybeMessage<::InstanceTransform>(Arena*);
template<> ::Transform* Arena::CreateMaybeMessage<::Transform>(Arena*);
template<> ::Vector3D* Arena::CreateMaybeMessage<::Vector3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActorOperation_2eproto);
    return ::descriptor_table_ActorOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActorOperation_2eproto;
};
// -------------------------------------------------------------------

class Vector3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector3D) */ {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vector3D* other);
  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const final {
    return CreateMaybeMessage<Vector3D>(nullptr);
  }

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActorOperation_2eproto);
    return ::descriptor_table_ActorOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Vector3D)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActorOperation_2eproto;
};
// -------------------------------------------------------------------

class InstanceIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InstanceIndex) */ {
 public:
  InstanceIndex();
  virtual ~InstanceIndex();

  InstanceIndex(const InstanceIndex& from);
  InstanceIndex(InstanceIndex&& from) noexcept
    : InstanceIndex() {
    *this = ::std::move(from);
  }

  inline InstanceIndex& operator=(const InstanceIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceIndex& operator=(InstanceIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceIndex* internal_default_instance() {
    return reinterpret_cast<const InstanceIndex*>(
               &_InstanceIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(InstanceIndex* other);
  friend void swap(InstanceIndex& a, InstanceIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceIndex* New() const final {
    return CreateMaybeMessage<InstanceIndex>(nullptr);
  }

  InstanceIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceIndex& from);
  void MergeFrom(const InstanceIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstanceIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActorOperation_2eproto);
    return ::descriptor_table_ActorOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:InstanceIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActorOperation_2eproto;
};
// -------------------------------------------------------------------

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Transform* other);
  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActorOperation_2eproto);
    return ::descriptor_table_ActorOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Vector3D position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::Vector3D& position() const;
  ::Vector3D* release_position();
  ::Vector3D* mutable_position();
  void set_allocated_position(::Vector3D* position);

  // .Vector3D rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::Vector3D& rotation() const;
  ::Vector3D* release_rotation();
  ::Vector3D* mutable_rotation();
  void set_allocated_rotation(::Vector3D* rotation);

  // .Vector3D scale = 3;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  const ::Vector3D& scale() const;
  ::Vector3D* release_scale();
  ::Vector3D* mutable_scale();
  void set_allocated_scale(::Vector3D* scale);

  // @@protoc_insertion_point(class_scope:Transform)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Vector3D* position_;
  ::Vector3D* rotation_;
  ::Vector3D* scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActorOperation_2eproto;
};
// -------------------------------------------------------------------

class InstanceTransform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InstanceTransform) */ {
 public:
  InstanceTransform();
  virtual ~InstanceTransform();

  InstanceTransform(const InstanceTransform& from);
  InstanceTransform(InstanceTransform&& from) noexcept
    : InstanceTransform() {
    *this = ::std::move(from);
  }

  inline InstanceTransform& operator=(const InstanceTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceTransform& operator=(InstanceTransform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceTransform* internal_default_instance() {
    return reinterpret_cast<const InstanceTransform*>(
               &_InstanceTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InstanceTransform* other);
  friend void swap(InstanceTransform& a, InstanceTransform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceTransform* New() const final {
    return CreateMaybeMessage<InstanceTransform>(nullptr);
  }

  InstanceTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceTransform& from);
  void MergeFrom(const InstanceTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstanceTransform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActorOperation_2eproto);
    return ::descriptor_table_ActorOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Transform transform = 2;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 2;
  const ::Transform& transform() const;
  ::Transform* release_transform();
  ::Transform* mutable_transform();
  void set_allocated_transform(::Transform* transform);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:InstanceTransform)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActorOperation_2eproto;
};
// -------------------------------------------------------------------

class InstanceForce :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InstanceForce) */ {
 public:
  InstanceForce();
  virtual ~InstanceForce();

  InstanceForce(const InstanceForce& from);
  InstanceForce(InstanceForce&& from) noexcept
    : InstanceForce() {
    *this = ::std::move(from);
  }

  inline InstanceForce& operator=(const InstanceForce& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceForce& operator=(InstanceForce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceForce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceForce* internal_default_instance() {
    return reinterpret_cast<const InstanceForce*>(
               &_InstanceForce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InstanceForce* other);
  friend void swap(InstanceForce& a, InstanceForce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceForce* New() const final {
    return CreateMaybeMessage<InstanceForce>(nullptr);
  }

  InstanceForce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceForce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceForce& from);
  void MergeFrom(const InstanceForce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceForce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstanceForce";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ActorOperation_2eproto);
    return ::descriptor_table_ActorOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Vector3D force = 2;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 2;
  const ::Vector3D& force() const;
  ::Vector3D* release_force();
  ::Vector3D* mutable_force();
  void set_allocated_force(::Vector3D* force);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:InstanceForce)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Vector3D* force_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActorOperation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:Vector3D.x)
  return x_;
}
inline void Vector3D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:Vector3D.y)
  return y_;
}
inline void Vector3D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:Vector3D.z)
  return z_;
}
inline void Vector3D::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Vector3D.z)
}

// -------------------------------------------------------------------

// InstanceIndex

// int32 index = 1;
inline void InstanceIndex::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstanceIndex::index() const {
  // @@protoc_insertion_point(field_get:InstanceIndex.index)
  return index_;
}
inline void InstanceIndex::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:InstanceIndex.index)
}

// -------------------------------------------------------------------

// Transform

// .Vector3D position = 1;
inline bool Transform::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Transform::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Vector3D& Transform::position() const {
  const ::Vector3D* p = position_;
  // @@protoc_insertion_point(field_get:Transform.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector3D*>(
      &::_Vector3D_default_instance_);
}
inline ::Vector3D* Transform::release_position() {
  // @@protoc_insertion_point(field_release:Transform.position)
  
  ::Vector3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Vector3D* Transform::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Transform.position)
  return position_;
}
inline void Transform::set_allocated_position(::Vector3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Transform.position)
}

// .Vector3D rotation = 2;
inline bool Transform::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline void Transform::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::Vector3D& Transform::rotation() const {
  const ::Vector3D* p = rotation_;
  // @@protoc_insertion_point(field_get:Transform.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector3D*>(
      &::_Vector3D_default_instance_);
}
inline ::Vector3D* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:Transform.rotation)
  
  ::Vector3D* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Vector3D* Transform::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3D>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Transform.rotation)
  return rotation_;
}
inline void Transform::set_allocated_rotation(::Vector3D* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Transform.rotation)
}

// .Vector3D scale = 3;
inline bool Transform::has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline void Transform::clear_scale() {
  if (GetArenaNoVirtual() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::Vector3D& Transform::scale() const {
  const ::Vector3D* p = scale_;
  // @@protoc_insertion_point(field_get:Transform.scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector3D*>(
      &::_Vector3D_default_instance_);
}
inline ::Vector3D* Transform::release_scale() {
  // @@protoc_insertion_point(field_release:Transform.scale)
  
  ::Vector3D* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::Vector3D* Transform::mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3D>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Transform.scale)
  return scale_;
}
inline void Transform::set_allocated_scale(::Vector3D* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:Transform.scale)
}

// -------------------------------------------------------------------

// InstanceTransform

// int32 index = 1;
inline void InstanceTransform::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstanceTransform::index() const {
  // @@protoc_insertion_point(field_get:InstanceTransform.index)
  return index_;
}
inline void InstanceTransform::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:InstanceTransform.index)
}

// .Transform transform = 2;
inline bool InstanceTransform::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline void InstanceTransform::clear_transform() {
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::Transform& InstanceTransform::transform() const {
  const ::Transform* p = transform_;
  // @@protoc_insertion_point(field_get:InstanceTransform.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::Transform*>(
      &::_Transform_default_instance_);
}
inline ::Transform* InstanceTransform::release_transform() {
  // @@protoc_insertion_point(field_release:InstanceTransform.transform)
  
  ::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Transform* InstanceTransform::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Transform>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:InstanceTransform.transform)
  return transform_;
}
inline void InstanceTransform::set_allocated_transform(::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:InstanceTransform.transform)
}

// -------------------------------------------------------------------

// InstanceForce

// int32 index = 1;
inline void InstanceForce::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstanceForce::index() const {
  // @@protoc_insertion_point(field_get:InstanceForce.index)
  return index_;
}
inline void InstanceForce::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:InstanceForce.index)
}

// .Vector3D force = 2;
inline bool InstanceForce::has_force() const {
  return this != internal_default_instance() && force_ != nullptr;
}
inline void InstanceForce::clear_force() {
  if (GetArenaNoVirtual() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
inline const ::Vector3D& InstanceForce::force() const {
  const ::Vector3D* p = force_;
  // @@protoc_insertion_point(field_get:InstanceForce.force)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector3D*>(
      &::_Vector3D_default_instance_);
}
inline ::Vector3D* InstanceForce::release_force() {
  // @@protoc_insertion_point(field_release:InstanceForce.force)
  
  ::Vector3D* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::Vector3D* InstanceForce::mutable_force() {
  
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3D>(GetArenaNoVirtual());
    force_ = p;
  }
  // @@protoc_insertion_point(field_mutable:InstanceForce.force)
  return force_;
}
inline void InstanceForce::set_allocated_force(::Vector3D* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete force_;
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:InstanceForce.force)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActorOperation_2eproto
